/*
Deployment script for n00617078

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "n00617078"
:setvar DefaultFilePrefix "n00617078"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.COP3855\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.COP3855\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
/*
The column AmountWanted on table [UNFCSD\n00617078].[Transactions] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column AmountWanted in table [UNFCSD\n00617078].[Transactions] is currently  NVARCHAR (MAX) NULL but is being changed to  INT NOT NULL. Data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [UNFCSD\n00617078].[Transactions]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [UNFCSD\n00617078].[tmp_ms_xx_Transactions] (
    [TransactionId]          INT            IDENTITY (1, 1) NOT NULL,
    [AcountId]               INT            NULL,
    [Active]                 BIT            NOT NULL,
    [Amount]                 INT            NOT NULL,
    [CurrencyType]           NVARCHAR (MAX) NULL,
    [CurrrencyWanted]        NVARCHAR (MAX) NULL,
    [TransactionDescription] NVARCHAR (MAX) NULL,
    [TransactionTitle]       NVARCHAR (MAX) NULL,
    [UserName]               NVARCHAR (MAX) NULL,
    [Wallet]                 NVARCHAR (MAX) NULL,
    [TransactionInfo]        NVARCHAR (MAX) NULL,
    [AmountWanted]           NVARCHAR(MAX)            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Transactions1] PRIMARY KEY CLUSTERED ([TransactionId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [UNFCSD\n00617078].[Transactions])
    BEGIN
        SET IDENTITY_INSERT [UNFCSD\n00617078].[tmp_ms_xx_Transactions] ON;
        INSERT INTO [UNFCSD\n00617078].[tmp_ms_xx_Transactions] ([TransactionId], [AcountId], [Active], [Amount], [CurrencyType], [CurrrencyWanted], [TransactionDescription], [TransactionTitle], [UserName], [Wallet], [TransactionInfo], [AmountWanted])
        SELECT   [TransactionId],
                 [AcountId],
                 [Active],
                 [Amount],
                 [CurrencyType],
                 [CurrrencyWanted],
                 [TransactionDescription],
                 [TransactionTitle],
                 [UserName],
                 [Wallet],
                 [TransactionInfo],
                 [AmountWanted]
        FROM     [UNFCSD\n00617078].[Transactions]
        ORDER BY [TransactionId] ASC;
        SET IDENTITY_INSERT [UNFCSD\n00617078].[tmp_ms_xx_Transactions] OFF;
    END

DROP TABLE [UNFCSD\n00617078].[Transactions];

EXECUTE sp_rename N'[UNFCSD\n00617078].[tmp_ms_xx_Transactions]', N'Transactions';

EXECUTE sp_rename N'[UNFCSD\n00617078].[tmp_ms_xx_constraint_PK_Transactions1]', N'PK_Transactions', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
